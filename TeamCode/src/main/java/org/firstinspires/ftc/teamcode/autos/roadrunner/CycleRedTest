package org.firstinspires.ftc.teamcode.autos.roadrunner;

import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.geometry.Vector2d;
import com.acmerobotics.roadrunner.trajectory.Trajectory;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.ColorSensor;

import org.firstinspires.ftc.teamcode.drive.SampleMecanumDrive;
import org.firstinspires.ftc.teamcode.opmodes.WebcamExample;
import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;

@Autonomous(name = "CycleRedTest", group = "Exercises")
public class CycleRedTest extends LinearOpMode {
    private ElapsedTime runtime = new ElapsedTime(); //Declared AND Initialized
    public DcMotor FrontLeft; //Declared  but not initialized
    public DcMotor FrontRight;
    public DcMotor BackLeft;
    public DcMotor BackRight;
    public DcMotor Intake;
    public DcMotor Spinner;
    public DcMotor Intake2;
    public DcMotor Slide;
    public Servo Bucket;
    int x = 0;
    boolean hasCube;
    public WebcamExample webcamExample = null;

    public void mecanumDrive(String driveType, double value1, double power) {

        FrontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BackLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FrontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BackRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        Slide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        if (driveType.equals("forward")) {
            FrontLeft.setTargetPosition((int) (42.78 * value1)); //enter value in inches
            BackLeft.setTargetPosition((int) (42.78 * value1));
            FrontRight.setTargetPosition((int) (42.78 * value1));
            BackRight.setTargetPosition((int) (42.78 * value1));
            FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontLeft.setPower(power);
            BackLeft.setPower(power);
            FrontRight.setPower(power);
            BackRight.setPower(power);
        } else if (driveType.equals("strafe")) {
            FrontLeft.setTargetPosition((int) (47.53 * value1)); //enter value in inches
            BackLeft.setTargetPosition((int) (-47.53 * value1));
            FrontRight.setTargetPosition((int) (-47.53 * value1));
            BackRight.setTargetPosition((int) (47.53 * value1));
            FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontLeft.setPower(power);
            BackLeft.setPower(power);
            FrontRight.setPower(power);
            BackRight.setPower(power);
        } else if (driveType.equals("turn")) {
            FrontLeft.setTargetPosition((int) (10.12 * value1)); //enter value in degrees
            BackLeft.setTargetPosition((int) (10.12 * value1));
            FrontRight.setTargetPosition((int) (-10.12 * value1));
            BackRight.setTargetPosition((int) (-10.12 * value1));
            FrontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BackRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FrontLeft.setPower(power);
            BackLeft.setPower(power);
            FrontRight.setPower(power);
            BackRight.setPower(power);
        }

        //noinspection StatementWithEmptyBody
        while ((FrontLeft.isBusy() || BackLeft.isBusy() || BackRight.isBusy() || FrontRight.isBusy()) && opModeIsActive()) {
        }
        FrontLeft.setPower(0.0);
        BackLeft.setPower(0.0);
        FrontRight.setPower(0.0);
        BackRight.setPower(0.0);

    }

    public void scoreFreight() {
        Slide.setTargetPosition(-1100);
        Slide.setPower(1);
        Slide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        while (Slide.isBusy() && opModeIsActive()) {
        }
        resetStartTime();
        double bucketTime = runtime.seconds();
        while (opModeIsActive() && runtime.seconds() < bucketTime + 3) {
            Bucket.setPosition(0);
        }
        double bucketTime2 = runtime.seconds();
        while (opModeIsActive() && runtime.seconds() < bucketTime2 + 1) {
            Bucket.setPosition(0.45);
        }
        Slide.setTargetPosition(0);
        Slide.setPower(1);
        Slide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        while (Slide.isBusy() && opModeIsActive()) {
        }
    }


    public void simpleIntake() {

        runtime.reset();
        while (opModeIsActive() && runtime.seconds() < 1) {
            Intake.setPower(-1);
            Intake2.setPower(1);
        }
        Intake.setPower(0);
        Intake2.setPower(0);
    }

    @Override
    public void runOpMode() throws InterruptedException {
        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
        FrontLeft = hardwareMap.get(DcMotor.class, "FrontLeft");
        BackLeft = hardwareMap.get(DcMotor.class, "BackLeft");
        FrontRight = hardwareMap.get(DcMotor.class, "FrontRight");
        BackRight = hardwareMap.get(DcMotor.class, "BackRight");
        Intake = hardwareMap.get(DcMotor.class, "Intake");
        Spinner = hardwareMap.get(DcMotor.class, "Spinner");
        Intake2 = hardwareMap.get(DcMotor.class, "Intake2");
        Slide = hardwareMap.get(DcMotor.class, "Slide");
        Bucket = hardwareMap.get(Servo.class, "Bucket");

        ColorSensor color;
        color = hardwareMap.get(ColorSensor.class, "Color");

        webcamExample = new WebcamExample();
        webcamExample.initCV(hardwareMap);
        //Set starting pose
        Pose2d startPose = new Pose2d(6, -64, Math.toRadians(-90));

        drive.setPoseEstimate(startPose);


        waitForStart();
        telemetry.addData("Red", color.red());
        telemetry.addData("Green", color.green());
        telemetry.addData("Blue", color.blue());
        telemetry.update();

        int level;
        int[] counts = {0, 0, 0};
        for (int i = 0; i < 500; i++) {
            if (webcamExample.getShippingHubLevel() == 0) {
                i = 0;
                continue;
            }
            counts[webcamExample.getShippingHubLevel() - 1]++;
        }

        if (counts[0] > counts[1] && counts[0] > counts[2]) { // Level = 1
            level = 1;

        } else if (counts[1] > counts[0] && counts[1] > counts[2]) { // Level = 2
            level = 2;
        } else { // Level = 3
            level = 3;
        }
        telemetry.addData("Hub Level", level);
        telemetry.update();

        if (isStopRequested()) return;

        //Cycle from starting position to hub
        TrajectorySequence traj = drive.trajectorySequenceBuilder(startPose)
                .setReversed(true)
                .splineTo(new Vector2d(-11, -46), Math.toRadians(90))
                .build();
        drive.followTrajectorySequence(traj);

        scoreFreight();

        //Cycle to warehouse
        TrajectorySequence traj2 = drive.trajectorySequenceBuilder(traj.end())
                .setReversed(false)
                .splineTo(new Vector2d(50, -66), Math.toRadians(0))
                .build();
        drive.followTrajectorySequence(traj2);

        simpleIntake();

        TrajectorySequence traj3 = drive.trajectorySequenceBuilder(traj2.end())
                .setReversed(true)
                .splineTo(new Vector2d(-11, -46), Math.toRadians(90))
                .build();
        drive.followTrajectorySequence(traj3);

        scoreFreight();

        drive.followTrajectorySequence(traj2);
        simpleIntake();

        drive.followTrajectorySequence(traj3);
        scoreFreight();

        drive.followTrajectorySequence(traj2);
        simpleIntake();

        drive.followTrajectorySequence(traj3);
        scoreFreight();

        TrajectorySequence traj4 = drive.trajectorySequenceBuilder(startPose)

                .setReversed((false))
                .splineTo(new Vector2d(50, -66), Math.toRadians(0))
                .build();
        drive.followTrajectorySequence(traj4);

        drive.update();
    }
}


